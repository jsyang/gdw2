
define(function() {
  var Instructions;
  return Instructions = (function() {

    Instructions.prototype.NEUTRAL_BOARDSETUP = {
      text: 'Drag the tiles to form a board of \nnon-overlapping tiles. Overlapped\ntiles are outlined in red.',
      audio: null,
      time: 1000
    };

    Instructions.prototype.BAD_BOARDINVALID = {
      text: 'Illegal board layout!',
      audio: null,
      time: 0
    };

    Instructions.prototype.NEUTRAL_GAMERULES1 = {
      text: 'Kulami\n\nThis game is won by scoring.\nA player who owns the most cells wins.\nOn each turn, a player places a marble in an empty spot on a tile.',
      audio: null,
      time: 0
    };

    Instructions.prototype.NEUTRAL_GAMERULES2 = {
      text: 'A tile (and its entire collection of cells) is owned by a player when the majority of its marbles are that player\'s color.',
      audio: null,
      time: 0
    };

    Instructions.prototype.NEUTRAL_GAMERULES3 = {
      text: 'On each turn, a player places a marble in an empty spot on a tile that does not contain the marble placed in the previous turn.\nThe move is legal only if it lies on the same row or column as the last turn.',
      audio: null,
      time: 0
    };

    Instructions.prototype.NEUTRAL_GAMERULES4 = {
      text: 'The game ends when a player has no legal moves left on their turn.',
      audio: null,
      time: 0
    };

    Instructions.prototype.BAD_REDSTURN = {
      text: 'It\'s Red\'s turn.',
      audio: null,
      time: 0
    };

    Instructions.prototype.BAD_BLACKSTURN = {
      text: 'It\'s Black\'s turn.',
      audio: null,
      time: 0
    };

    Instructions.prototype.timer = 600;

    Instructions.prototype.type = 'text';

    Instructions.prototype.current = 'NEUTRAL_BOARDSETUP';

    Instructions.prototype.game = null;

    function Instructions(params) {
      var k, v;
      for (k in params) {
        v = params[k];
        this[k] = v;
      }
      ({
        HELP: [this.NEUTRAL_GAMERULES1, this.NEUTRAL_GAMERULES2, this.NEUTRAL_GAMERULES3, this.NEUTRAL_GAMERULES4]
      });
    }

    Instructions.prototype.clear = function() {
      return this.current = null;
    };

    Instructions.prototype.set = function(params) {
      if (params != null) {
        this.current = params.name;
        this.timer = this[this.current].time;
        return this.type = params.type != null ? params.type : 'text';
      }
    };

    Instructions.prototype.draw = function() {
      var ac, i, l, text, _i, _len;
      if (this.current != null) {
        switch (this.type) {
          case 'text':
            if (this.timer > 0) {
              ac = atom.context;
              ac.font = 'bold 20px Helvetica';
              ac.fillStyle = '#222';
              text = this[this.current].text.split('\n');
              i = 0;
              for (_i = 0, _len = text.length; _i < _len; _i++) {
                l = text[_i];
                ac.fillText(l.toUpperCase(), 10, atom.height - (20 * (text.length - i)));
                i++;
              }
              this.timer--;
            }
            break;
          case 'alert':
            if (this.timer > 0) {
              alert(this[this.current].text);
              this.clear();
            }
        }
      }
    };

    return Instructions;

  })();
});

// Generated by CoffeeScript 1.5.0-pre
