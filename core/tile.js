
define(function() {
  var MoveTile;
  return MoveTile = (function() {

    MoveTile.prototype.BORDERSIZE = 4;

    MoveTile.prototype.BORDERSIZE_ = 0.25;

    MoveTile.prototype.CELLSIZE = 32;

    MoveTile.prototype.size = null;

    MoveTile.prototype.x = 0;

    MoveTile.prototype.y = 0;

    MoveTile.prototype.w = 1;

    MoveTile.prototype.h = 1;

    MoveTile.prototype.lx = 0;

    MoveTile.prototype.ly = 0;

    MoveTile.prototype.invalidPlacement = true;

    MoveTile.prototype.cells = null;

    MoveTile.prototype.transposeOrientation = function() {
      var _h, _ref, _w;
      _ref = [this.w, this.h], _w = _ref[0], _h = _ref[1];
      this.w = _h;
      return this.h = _w;
    };

    MoveTile.prototype.containsPoint = function(x, y) {
      return ((this.x <= x && x < this.x + this.CELLSIZE * this.w)) && ((this.y <= y && y < this.y + this.CELLSIZE * this.h));
    };

    MoveTile.prototype.lockOrientation = function() {
      var i;
      return this.cells = (function() {
        var _i, _ref, _results;
        _results = [];
        for (i = _i = 0, _ref = this.w * this.h; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          _results.push(0);
        }
        return _results;
      }).call(this);
    };

    MoveTile.prototype.getInnerCell = function(x, y) {
      return this.cells[this.w * y + x];
    };

    MoveTile.prototype.getOuterCell = function(x, y) {
      return this.getInnerCell(x - this.lx, y - this.ly);
    };

    MoveTile.prototype.setInnerCell = function(x, y, v) {
      return this.cells[this.w * y + x] = v;
    };

    MoveTile.prototype.setOuterCell = function(x, y, v) {
      return this.setInnerCell(x - this.lx, y - this.ly, v);
    };

    MoveTile.prototype.draw = function() {
      var ac, cx, cy, h, i, j, w, x, y, _i, _j, _ref, _ref1, _ref2;
      ac = atom.context;
      ac.lineWidth = 2;
      if (this.invalidPlacement) {
        ac.strokeStyle = '#a99';
      } else {
        ac.strokeStyle = '#999';
      }
      for (j = _i = 0, _ref = this.h; 0 <= _ref ? _i < _ref : _i > _ref; j = 0 <= _ref ? ++_i : --_i) {
        for (i = _j = 0, _ref1 = this.w; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
          _ref2 = [this.x + this.CELLSIZE * i, this.y + this.CELLSIZE * j, this.CELLSIZE, this.CELLSIZE, this.x + this.CELLSIZE * i + this.CELLSIZE * 0.5, this.y + this.CELLSIZE * j + this.CELLSIZE * 0.5], x = _ref2[0], y = _ref2[1], w = _ref2[2], h = _ref2[3], cx = _ref2[4], cy = _ref2[5];
          if (this.invalidPlacement) {
            ac.fillStyle = '#dbc';
          } else {
            ac.fillStyle = '#abc';
          }
          ac.fillRect(x, y, w, h);
          ac.strokeRect(x, y, w, h);
          if (this.invalidPlacement) {
            ac.fillStyle = '#a89';
          } else {
            if ((this.cells != null) && this.cells[this.w * j + i] > 0) {
              if (this.cells[this.w * j + i] === 1) {
                ac.fillStyle = '#b32';
              } else {
                ac.fillStyle = '#222';
              }
            } else {
              ac.fillStyle = '#789';
            }
          }
          ac.beginPath();
          ac.arc(cx, cy, 8, 0, 2 * Math.PI, true);
          ac.fill();
          ac.stroke();
        }
      }
      if (this.invalidPlacement) {
        ac.strokeStyle = '#500';
      } else {
        ac.strokeStyle = '#000';
      }
      ac.lineWidth = this.BORDERSIZE;
      return ac.strokeRect(this.x + this.BORDERSIZE_ + 1, this.y + this.BORDERSIZE_ + 1, this.w * this.CELLSIZE - this.BORDERSIZE + 2, this.h * this.CELLSIZE - this.BORDERSIZE + 2);
    };

    function MoveTile(params) {
      var k, sides, v, _ref;
      for (k in params) {
        v = params[k];
        this[k] = v;
      }
      if (this.size != null) {
        sides = this.size.split('x');
        if (sides[0] > sides[1]) {
          this.w = sides[0];
          this.h = sides[1];
        } else {
          this.w = sides[1];
          this.h = sides[0];
        }
        _ref = [parseInt(this.w), parseInt(this.h)], this.w = _ref[0], this.h = _ref[1];
      }
    }

    return MoveTile;

  })();
});

// Generated by CoffeeScript 1.5.0-pre
